
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.BorderFactory;
import javax.swing.border.Border;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author younes
 */
public class GuiImpl extends javax.swing.JFrame implements GuiService,TimerListener {

    /**
     * Creates new form GuiImpl
     */
    public GuiImpl() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ZoomIn = new javax.swing.JButton();
        ZoomOut = new javax.swing.JButton();
        Desactivate = new javax.swing.JButton();
        Activate = new javax.swing.JButton();
        TimeStamp = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.FlowLayout());

        ZoomIn.setText("ZoomIn");
        ZoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZoomInActionPerformed(evt);
            }
        });
        getContentPane().add(ZoomIn);

        ZoomOut.setText("ZoomOut");
        ZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZoomOutActionPerformed(evt);
            }
        });
        getContentPane().add(ZoomOut);

        Desactivate.setText("Desactivate");
        Desactivate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DesactivateActionPerformed(evt);
            }
        });
        getContentPane().add(Desactivate);

        Activate.setText("Activate");
        Activate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActivateActionPerformed(evt);
            }
        });
        getContentPane().add(Activate);

        TimeStamp.setText("TimeStamp");
        getContentPane().add(TimeStamp);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DesactivateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DesactivateActionPerformed
        // TODO add your handling code here:
        this.desactivate();
    }//GEN-LAST:event_DesactivateActionPerformed

    private void ActivateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActivateActionPerformed
        // TODO add your handling code here:
        this.activate();
    }//GEN-LAST:event_ActivateActionPerformed

    private void ZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZoomInActionPerformed
        // TODO add your handling code here:
        this.zoomIn();
    }//GEN-LAST:event_ZoomInActionPerformed

    private void ZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZoomOutActionPerformed
        // TODO add your handling code here:
        this.zoomOut();
    }//GEN-LAST:event_ZoomOutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuiImpl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuiImpl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuiImpl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuiImpl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GuiImpl().setVisible(true);
            }
        });
    }

    public void update(){
      TimeStamp.setPreferredSize(new Dimension(250, 100));
      TimeStamp.setForeground(new Color(120, 90, 40));
      TimeStamp.setBackground(new Color(100, 20, 70));
        TimerImplementation ti=(TimerImplementation)Lookup.GET_INSTANCE().get(TimerService.class);
        TimeStamp.setText(ti.getLastHours().toString()+" : "+ti.getLastMinutes().toString()+" : "+ti.getLastSeconds().toString());
    }

@Override
    public void activate() {
      TimeStamp.setFont(new Font("Verdana", Font.PLAIN, 15));
      TimeStamp.setPreferredSize(new Dimension(250, 100));
      TimeStamp.setForeground(new Color(120, 90, 40));
      TimeStamp.setBackground(new Color(100, 20, 70));
      TimeStamp.setVisible(true);
    }

    @Override
    public void desactivate() {
        TimeStamp.setVisible(false);
    }

    @Override
    public void zoomIn() {
      TimeStamp.setFont(new Font("Verdana", Font.PLAIN, 15));
      TimeStamp.setPreferredSize(new Dimension(250, 100));
      TimeStamp.setForeground(new Color(120, 90, 40));
      TimeStamp.setBackground(new Color(100, 20, 70));
    }

    @Override
    public void zoomOut() {
      TimeStamp.setFont(new Font("Verdana", Font.PLAIN, 10));
      TimeStamp.setPreferredSize(new Dimension(250, 100));
      TimeStamp.setForeground(new Color(120, 90, 40));
      TimeStamp.setBackground(new Color(100, 20, 70));
    }

    @Override
    public void showTime() {
      TimeStamp.setFont(new Font("Verdana", Font.PLAIN, 15));
      TimeStamp.setPreferredSize(new Dimension(250, 100));
      TimeStamp.setForeground(new Color(120, 90, 40));
      TimeStamp.setBackground(new Color(100, 20, 70));
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH:mm:ss");
        LocalDateTime now = LocalDateTime.now();
        TimeStamp.setText(dtf.format(now));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Activate;
    private javax.swing.JButton Desactivate;
    private javax.swing.JLabel TimeStamp;
    private javax.swing.JButton ZoomIn;
    private javax.swing.JButton ZoomOut;
    // End of variables declaration//GEN-END:variables

}
